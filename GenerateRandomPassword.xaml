<Activity mc:Ignorable="sap sap2010 sads" x:Class="GeneratePassword" this:GeneratePassword.MaxLength="8" this:GeneratePassword.MinLength="8" this:GeneratePassword.RequiredUpperCaseLetters="1" this:GeneratePassword.RequiredLowerCaseLetters="0" this:GeneratePassword.RequiredDigits="0" this:GeneratePassword.RequiredSpecialChars="1" this:GeneratePassword.AllowedSpecialChars="[&quot; !&quot;&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}&quot;]"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:this="clr-namespace:"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="MaxLength" Type="InArgument(x:Int32)" />
    <x:Property Name="MinLength" Type="InArgument(x:Int32)" />
    <x:Property Name="RequiredUpperCaseLetters" Type="InArgument(x:Int32)" />
    <x:Property Name="RequiredLowerCaseLetters" Type="InArgument(x:Int32)" />
    <x:Property Name="Password" Type="OutArgument(x:String)" />
    <x:Property Name="RequiredDigits" Type="InArgument(x:Int32)" />
    <x:Property Name="RequiredSpecialChars" Type="InArgument(x:Int32)" />
    <x:Property Name="AllowedSpecialChars" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>GeneratePassword_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Core</AssemblyReference>
      <AssemblyReference>UiPath.Core.Activities</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>UiPath.CV.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="GeneratePassword" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Default="abcdefgijkmnopqrstwxyz" Name="lowerCaseLetters" />
      <Variable x:TypeArguments="x:String" Default="ABCDEFGHJKLMNPQRSTWXYZ" Name="upperCaseLetters" />
      <Variable x:TypeArguments="x:String" Default="0123456789" Name="numbers" />
      <Variable x:TypeArguments="s:Random" Name="randomGenerator" />
      <Variable x:TypeArguments="scg:List(x:Char)" Name="selectedChars" />
      <Variable x:TypeArguments="x:Int32" Name="totalLength" />
      <Variable x:TypeArguments="x:Int32" Name="counter" />
      <Variable x:TypeArguments="x:String" Name="allAvailableChars" />
      <Variable x:TypeArguments="s:Char[]" Name="passwordCharArray" />
      <Variable x:TypeArguments="scg:List(x:Int32)" Name="emptyLocations" />
    </Sequence.Variables>
    <If Condition="[MinLength &lt; RequiredLowerCaseLetters + RequiredUpperCaseLetters + RequiredDigits + RequiredSpecialChars]" DisplayName="If - MinLength &lt; RequiredLength" sap2010:WorkflowViewState.IdRef="If_2">
      <If.Then>
        <Throw DisplayName="Throw - Invalid Length" Exception="[new ArgumentException(&quot;MinLength is lower than required length&quot;)]" sap2010:WorkflowViewState.IdRef="Throw_2" />
      </If.Then>
    </If>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim randomBytes as Byte()&#xA;randomBytes = New Byte(4) {}&#xA;Dim rngCrypto As System.Security.Cryptography.RNGCryptoServiceProvider&#xA;rngCrypto = New System.Security.Cryptography.RNGCryptoServiceProvider()&#xA;rngCrypto.GetBytes(randomBytes)&#xA;randomGenerator = New Random(BitConverter.ToInt32(randomBytes,0))" DisplayName="Invoke code - init the randomGenerator" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InOutArgument x:TypeArguments="s:Random" x:Key="randomGenerator">[randomGenerator]</InOutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <Assign DisplayName="Assign - allAvailableChars" sap2010:WorkflowViewState.IdRef="Assign_12">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[allAvailableChars]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[lowerCaseLetters + upperCaseLetters + numbers + AllowedSpecialChars]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - totalLength" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[totalLength]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[randomGenerator.Next(MinLength, MaxLength +1)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - selectedChars" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:Char)">[selectedChars]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:Char)">[new List(Of Char)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - counter = 0" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <While DisplayName="While - counter &lt; RequiredLowerCaseLetters" sap2010:WorkflowViewState.IdRef="While_1" Condition="[counter &lt; RequiredLowerCaseLetters]">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
        <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + LowerCaseLetter" sap2010:WorkflowViewState.IdRef="AddToCollection`1_3" Item="[lowerCaseLetters.ToCharArray()(randomGenerator.Next(lowerCaseLetters.Length))]" />
        <Assign DisplayName="Assign - counter++" sap2010:WorkflowViewState.IdRef="Assign_5">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
    </While>
    <Assign DisplayName="Assign - counter = 0" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <While DisplayName="While - counter &lt; RequiredUpperCaseLetters" sap2010:WorkflowViewState.IdRef="While_2" Condition="[counter &lt; RequiredUpperCaseLetters]">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_4">
        <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + UpperCaseLetter" sap2010:WorkflowViewState.IdRef="AddToCollection`1_4" Item="[upperCaseLetters.ToCharArray()(randomGenerator.Next(upperCaseLetters.Length))]" />
        <Assign DisplayName="Assign - counter++" sap2010:WorkflowViewState.IdRef="Assign_6">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
    </While>
    <Assign DisplayName="Assign - counter = 0" sap2010:WorkflowViewState.IdRef="Assign_8">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <While DisplayName="While - counter &lt; RequiredNumbers" sap2010:WorkflowViewState.IdRef="While_3" Condition="[counter &lt; RequiredDigits]">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_5">
        <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + Number" sap2010:WorkflowViewState.IdRef="AddToCollection`1_5" Item="[numbers.ToCharArray()(randomGenerator.Next(numbers.Length))]" />
        <Assign DisplayName="Assign - counter++" sap2010:WorkflowViewState.IdRef="Assign_9">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
    </While>
    <Assign DisplayName="Assign - counter = 0" sap2010:WorkflowViewState.IdRef="Assign_10">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <While DisplayName="While - counter &lt; RequiredNonAlphaNumericChars" sap2010:WorkflowViewState.IdRef="While_4" Condition="[counter &lt; RequiredSpecialChars]">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
        <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection selectedChars + NonAlphaNumericChar" sap2010:WorkflowViewState.IdRef="AddToCollection`1_6" Item="[AllowedSpecialChars.ToCharArray()(randomGenerator.Next(AllowedSpecialChars.Length))]" />
        <Assign DisplayName="Assign - counter++" sap2010:WorkflowViewState.IdRef="Assign_11">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
    </While>
    <While DisplayName="While - selectedChars.Count &lt; totalLength" sap2010:WorkflowViewState.IdRef="While_5" Condition="[selectedChars.Count &lt; totalLength]">
      <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + random char" sap2010:WorkflowViewState.IdRef="AddToCollection`1_7" Item="[allAvailableChars.ToCharArray()(randomGenerator.Next(allAvailableChars.Length))]" />
    </While>
    <Assign DisplayName="Assign - passwordCharArray" sap2010:WorkflowViewState.IdRef="Assign_13">
      <Assign.To>
        <OutArgument x:TypeArguments="s:Char[]">[passwordCharArray]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:Char[]">[new Char(totalLength - 1){}]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - emptyLocations" sap2010:WorkflowViewState.IdRef="Assign_15">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:Int32)">[emptyLocations]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:Int32)">[Enumerable.Range(0, totalLength).ToList]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ForEach x:TypeArguments="x:Char" DisplayName="For each - selectedChar" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[selectedChars]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:Char">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:Char" Name="selectedChar" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_7">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="index" />
            </Sequence.Variables>
            <Assign DisplayName="Assign - counter++" sap2010:WorkflowViewState.IdRef="Assign_14">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[index]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[randomGenerator.Next(0, emptyLocations.Count - 1)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign - passwordCharArray(emptyLocations(index))" sap2010:WorkflowViewState.IdRef="Assign_17">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Char">[passwordCharArray(emptyLocations(index))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Char">[selectedChar]</InArgument>
              </Assign.Value>
            </Assign>
            <RemoveFromCollection x:TypeArguments="x:Int32" Collection="[emptyLocations]" DisplayName="Remove from collection - EmptyLocations" sap2010:WorkflowViewState.IdRef="RemoveFromCollection`1_4" Item="[emptyLocations(index)]" />
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
    </ui:ForEach>
    <Assign DisplayName="Assign - Password" sap2010:WorkflowViewState.IdRef="Assign_18">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[Password]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[String.Join("", passwordCharArray)]</InArgument>
      </Assign.Value>
    </Assign>
    <WriteLine DisplayName="Write line" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[Password.ToString]" />
    <sads:DebugSymbol.Symbol>d2VDOlxVc2Vyc1xzb3Jpbi5jYWxpblxEZXNrdG9wXFVpUGF0aFRlYW0uR2VuZXJhdGVSYW5kb21QYXNzd29yZC5BY3Rpdml0aWVzXEdlbmVyYXRlUmFuZG9tUGFzc3dvcmQueGFtbGYB9gIBugMBCAGKAQGMAQEHAWYBaAEGAb0BAb8BAQUB8AEB8gEBBAHIAgHKAgEDAZkCAZsCAQJQA48CDgIBAVI0UkwCAQRTNFNMAgEDVDRUQAIBAl0FYQoDAaIBYgVmFQMBnwFnBW4OAwGXAW8Fdg4DAZABdwV+DgMBjAF/BYYBDgMBiAGHAQWTAQ0CAXeUAQWbAQ4CAXOcAQWoAQ0CAWKpAQWwAQ4CAV6xAQW9AQ0CAU2+AQXFAQ4CAUnGAQXSAQ0CATjTAQXVAQ0CAS3WAQXdAQ4CASjeAQXlAQ4CASTmAQWEAhICAQ2FAgWMAg4CAQiNAgWNAnQCAQVdE12BAQMBowFfCV+6AQMBqQFkS2RcAwGgAWwwbHUDAZoBaTFpRAMBmAF0L3ReAwGTAXEwcT0DAZEBfDh8SwMBjwF5OXlIAwGNAYQBL4QBMAMBiwGBATCBATkDAYkBiAEHkgESAgF7hwF8hwGlAQIBeJkBL5kBMAIBdpYBMJYBOQIBdJ0BB6cBEgIBZpwBfJwBpQECAWOuAS+uATACAWGrATCrATkCAV+yAQe8ARICAVGxAXOxAZIBAgFOwwEvwwEwAgFMwAEwwAE5AgFKxwEH0QESAgE8xgGAAcYBpQECATnUAQfUAZ0CAgEx0wF70wGjAQIBLtsBMNsBTQIBK9gBMdgBRAIBKeMBOeMBYgIBJ+ABOuABSgIBJeYBhQHmAZYBAgEi7AELgQIWAgEOigIwigJUAgELhwIxhwI7AgEJjQJcjQJxAgEGXz9fjQEDAaoBiQEJiQGhAgMBgQGKAQmRARICAXyeAQmeAaECAgFsnwEJpgESAgFnswEJswGGAgIBV7QBCbsBEgIBUsgBCcgBqQICAULJAQnQARICAT3UATzUAU0CATbUAccB1AGaAgIBMvABDfcBFgIBHPgBDf8BFgIBFYACDYAC7QECAQ+JAT6JAU8DAYYBiQHNAYkBngIDAYIBjwEzjwFAAgF/jAE0jAE9AgF9ngE+ngFPAgFxngHNAZ4BngICAW2kATOkAUACAWqhATShAT0CAWizAT6zAU8CAVyzAcQBswGDAgIBWLkBM7kBQAIBVbYBNLYBPQIBU8gBPsgBTwIBR8gBzwHIAaYCAgFDzgEzzgFAAgFAywE0ywE9AgE+9QE39QFqAgEf8gE48gE/AgEd/QE2/QFEAgEa+gE3+gFhAgEWgAJIgAJaAgETgALRAYAC6gECARA=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Throw_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="464,208" />
      <sap2010:ViewStateData Id="InvokeCode_1" sap:VirtualizedContainerService.HintSize="464,164" />
      <sap2010:ViewStateData Id="Assign_12" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="AddToCollection`1_3" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="264,246">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="464,404" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="AddToCollection`1_4" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="264,246">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_2" sap:VirtualizedContainerService.HintSize="464,404" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="AddToCollection`1_5" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="264,246">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_3" sap:VirtualizedContainerService.HintSize="464,404" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="AddToCollection`1_6" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="264,246">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_4" sap:VirtualizedContainerService.HintSize="464,404" />
      <sap2010:ViewStateData Id="AddToCollection`1_7" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="While_5" sap:VirtualizedContainerService.HintSize="464,218" />
      <sap2010:ViewStateData Id="Assign_13" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_15" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_14" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_17" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="RemoveFromCollection`1_4" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="264,346">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_2" sap:VirtualizedContainerService.HintSize="464,480">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_18" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="WriteLine_1" sap:VirtualizedContainerService.HintSize="464,61" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="486,4191">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GeneratePassword_1" sap:VirtualizedContainerService.HintSize="526,4311" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>